{"version":3,"file":"storage.js","mappings":";;;;;;;;;;;;;;AAAA;;AAEe;;AAEf;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,6EAA6E,KAAK,QAAQ,KAAK;AAC/F;AACA;;AAEA;AACA;AACA;AACA;AACA,qDAAqD,2BAA2B;AAChF,iDAAiD,mCAAmC;AACpF;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,gDAAgD,KAAK;AACrD,oCAAoC,KAAK;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;UCrDA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;ACN+B;;AAE/B;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,IAAI,0DAAiB;AACrB,wDAAwD,0DAAiB;AACzE,IAAI,2DAAkB;;AAEtB;AACA,C","sources":["webpack://stage1-tasks/./src/js/Weather.js","webpack://stage1-tasks/webpack/bootstrap","webpack://stage1-tasks/webpack/runtime/define property getters","webpack://stage1-tasks/webpack/runtime/hasOwnProperty shorthand","webpack://stage1-tasks/webpack/runtime/make namespace object","webpack://stage1-tasks/./src/js/dataSaver.js"],"sourcesContent":["var langInApp = 'en'\n\nexport default class Weather {\n\n    constructor() {\n        document.querySelector('input.city').addEventListener('keydown', (e) => {\n            if (e.keyCode === 13) {\n                Weather.getWeather(document.querySelector('input.city').value, Weather.langInApp)\n            }\n        });\n    }\n\n    static async getWeather(city, lang) {\n        console.log(\"getWeather langInApp = \", Weather.langInApp)\n        console.log(\"getWeather lang = \", lang)\n        Weather.langInApp = lang\n        Weather.city = document.querySelector('input.city')\n        Weather.weatherIcon = document.querySelector('.weather-icon')\n        Weather.temperature = document.querySelector('.temperature')\n        Weather.weatherDescription = document.querySelector('.weather-description')\n        Weather.wind = document.querySelector('.wind')\n        Weather.humidity = document.querySelector('.humidity')\n        Weather.weatherError = document.querySelector('.weather-error')\n\n        try {\n            const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&lang=${lang}&appid=4dd926d8428c8f4eba2fa99faf125bf1&units=metric`;\n            const res = await fetch(url)\n            Weather.data = await res.json()\n\n            if (Weather.weatherIcon.classList[2]) {\n                Weather.weatherIcon.classList.remove(Weather.weatherIcon.classList[2])\n            }\n            Weather.weatherError.textContent = '';\n            Weather.weatherIcon.classList.add(`owf-${Weather.data.weather[0].id}`)\n            Weather.temperature.textContent = `${Math.trunc(Weather.data.main.temp)}°C`\n            Weather.weatherDescription.textContent = Weather.data.weather[0].description\n            let windText = lang == 'en' ? \"Wind speed: \" : \"Скорость ветра: \"\n            let windDim = lang == 'en' ? \" m/s\" : \" м/с\"\n            Weather.wind.textContent = windText + Math.round(Weather.data.wind.speed) + windDim;\n            let humidityText = lang == 'en' ? \"Humidity: \" : \"Влажность: \"\n            Weather.humidity.textContent = humidityText + Weather.data.main.humidity + \"%\"\n        } catch (e) {\n            Weather.weatherError.textContent = lang == 'en'\n                ? `Error! city not found for '${city}'!`\n                : `Ошибка! город '${city}' - не найден!`\n\n            Weather.weatherIcon.classList.remove(Weather.weatherIcon.classList[2])\n            Weather.temperature.textContent = ''\n            Weather.weatherDescription.textContent = ''\n            Weather.wind.textContent = ''\n            Weather.humidity.textContent = ''\n        }\n    }\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import Weather from './Weather'\n\nvar langInApp = null\n\nlet isLoaded = false\nwindow.addEventListener('load', getLocalStorage)\nwindow.addEventListener('beforeunload', setLocalStorage)\n\nfunction setLocalStorage() {\n    if (isLoaded) {\n        window.localStorage.setItem('userName', document.querySelector(\"input.name\").value)\n        window.localStorage.setItem('city', document.querySelector(\"input.city\").value)\n        window.localStorage.setItem('langInApp', langInApp)\n    }\n}\n\nfunction getLocalStorage() {\n    if(window.localStorage.getItem('userName') != undefined) {\n        document.querySelector(\"input.name\").value = window.localStorage.getItem('userName')\n    }\n\n    let city = window.localStorage.getItem('city')\n    if (city) {\n        document.querySelector(\"input.city\").value = city\n    } else {\n        document.querySelector(\"input.city\").value = 'Minsk'\n    }\n\n    let langRes = window.localStorage.getItem('langInApp')\n    if (langRes) {\n        langInApp = langRes\n    } else {\n        langInApp = 'en'\n    }\n    console.log(\"getLocalStorage langInApp = \", langInApp)\n    Weather.langInApp = langInApp\n    console.log(\"getLocalStorage Weather.langInApp = \", Weather.langInApp)\n    Weather.getWeather(document.querySelector(\"input.city\").value, langInApp)\n\n    isLoaded = true\n}"],"names":[],"sourceRoot":""}